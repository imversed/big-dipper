"use strict";
/**
 * Copyright 2014-present Palantir Technologies
 * @license MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
var rTree_1 = require("./rTree");
/**
 * Implementation of {IEntityStore} that uses an array for easy iteration as
 * well as a quad tree for fast nearest-point queries.
 *
 * Note that if the position of your entities changes, you MUST rebuild the
 * entity store for the `entityNearest` method to work since the quadtree does
 * not know that its nodes have moved.
 */
var EntityStore = /** @class */ (function () {
    function EntityStore() {
        this._entities = [];
        this._rtree = new rTree_1.RTree();
    }
    EntityStore.prototype.addAll = function (entities, entityBoundsFactory, bounds) {
        this._entities = this._entities.concat(entities);
        // filter out of bounds entities if bounds is defined
        if (bounds !== undefined) {
            var filterBounds = rTree_1.RTreeBounds.bounds(bounds);
            for (var i = 0; i < entities.length; i++) {
                var entity = entities[i];
                var entityBounds = rTree_1.RTreeBounds.entityBounds(entityBoundsFactory(entity));
                if (rTree_1.RTreeBounds.isBoundsOverlapBounds(filterBounds, entityBounds)) {
                    this._rtree.insert(entityBounds, entity);
                }
            }
        }
        else {
            for (var i = 0; i < entities.length; i++) {
                var entity = entities[i];
                var entityBounds = rTree_1.RTreeBounds.entityBounds(entityBoundsFactory(entity));
                this._rtree.insert(entityBounds, entity);
            }
        }
    };
    EntityStore.prototype.entityNearest = function (queryPoint) {
        return this._rtree.locateNearest(queryPoint).pop();
    };
    EntityStore.prototype.entityNearestX = function (queryPoint) {
        return this._rtree.locateNearestX(queryPoint).pop();
    };
    EntityStore.prototype.entityNearestY = function (queryPoint) {
        return this._rtree.locateNearestY(queryPoint).pop();
    };
    EntityStore.prototype.entitiesInBounds = function (bounds) {
        return this._rtree.intersect(rTree_1.RTreeBounds.entityBounds(bounds));
    };
    EntityStore.prototype.entitiesInXBounds = function (bounds) {
        return this._rtree.intersectX(rTree_1.RTreeBounds.entityBounds(bounds));
    };
    EntityStore.prototype.entitiesInYBounds = function (bounds) {
        return this._rtree.intersectY(rTree_1.RTreeBounds.entityBounds(bounds));
    };
    EntityStore.prototype.entities = function () {
        return this._entities;
    };
    return EntityStore;
}());
exports.EntityStore = EntityStore;
