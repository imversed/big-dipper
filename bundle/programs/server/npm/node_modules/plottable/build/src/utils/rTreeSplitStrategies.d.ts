/**
 * Copyright 2017-present Palantir Technologies
 * @license MIT
 */
import { RTreeNode } from "./rTree";
export declare type NodePair<T> = [RTreeNode<T>, RTreeNode<T>];
export interface IRTreeSplitStrategy {
    split: <T>(entries: RTreeNode<T>[], nodes: NodePair<T>) => void;
}
export declare class SplitStrategyTrivial implements IRTreeSplitStrategy {
    split<T>(entries: RTreeNode<T>[], nodes: NodePair<T>): void;
}
export declare class SplitStrategyLinear implements IRTreeSplitStrategy {
    split<T>(entries: RTreeNode<T>[], nodes: NodePair<T>): void;
    /**
     * Choose the two farthest-apart entries to begin the split.
     */
    private chooseFirstSplit<T>(entries, nodes);
    /**
     * Split the next entry. Choose the entry that expands its parent node's
     * area the least.
     */
    private addNext<T>(entries, nodes);
}
