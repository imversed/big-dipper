import { Point } from "../";
import { Component } from "../components/component";
/**
 * Returns a singleton-ized `Translator` instance associated with the component.
 */
export declare function getTranslator(component: Component): Translator;
/**
 * The translator implements CSS transform aware position measuring. We manually
 * compute a cumulative CSS3 of the root element ancestors up to `<body>`.
 */
export declare class Translator {
    private _rootElement;
    constructor(_rootElement: HTMLElement);
    /**
     * Given `document` client coordinates, computes the position relative to the
     * `Component`'s root element, taking into account the cumulative CSS3
     * transforms of the root element ancestors up to `<body>`.
     *
     * This triggers a layout but doesn't further modify the DOM, so causes a
     * maximum of one layout per frame.
     *
     * Does not support `transform-origin` CSS property other than the default.
     */
    computePosition(clientX: number, clientY: number): Point;
    /**
     * Is the event's target part of the given component's DOM tree?
     */
    static isEventInside(component: Component, e: Event): boolean;
}
