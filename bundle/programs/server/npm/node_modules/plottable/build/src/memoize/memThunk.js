"use strict";
/**
 * Copyright 2014-present Palantir Technologies
 * @license MIT
 * @fileoverview Implements a convenient thunk function to handle the common case
 * of creating a memoized function that takes its inputs from mutable class properties.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("./index");
/**
 * First pass argument thunks that will be evaluated whenever the memThunk
 * is accessed. This should be fast and simple.
 *
 * Then pass a pure function that, when given the argument thunks' values,
 * will output some computed value. It should not use `this` in the body.
 *
 * We memoize and return this pure function.
 *
 * This way, memThunk lets you implement a performant, always-up-to-date "computed"
 * value getter.
 */
function memThunk() {
    var argsAndCompute = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        argsAndCompute[_i] = arguments[_i];
    }
    var inputs = argsAndCompute.slice(0, -1);
    var compute = argsAndCompute[argsAndCompute.length - 1];
    var memoizedCompute = index_1.memoize(compute);
    var memoizedThunk = function () {
        var _this = this;
        var inputEval = inputs.map(function (inputFn) { return inputFn.apply(_this); });
        return memoizedCompute.apply(undefined, inputEval);
    };
    return memoizedThunk;
}
exports.memThunk = memThunk;
