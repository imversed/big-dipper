"use strict";
/**
 * Copyright 2017-present Palantir Technologies
 * @license MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Utils = require("../utils");
var _TRANSLATOR_KEY = "__Plottable_ClientTranslator";
/**
 * Returns a singleton-ized `Translator` instance associated with the component.
 */
function getTranslator(component) {
    var rootElement = component.root().rootElement().node();
    var translator = rootElement[_TRANSLATOR_KEY];
    if (translator == null) {
        translator = new Translator(rootElement);
        rootElement[_TRANSLATOR_KEY] = translator;
    }
    return translator;
}
exports.getTranslator = getTranslator;
/**
 * The translator implements CSS transform aware position measuring. We manually
 * compute a cumulative CSS3 of the root element ancestors up to `<body>`.
 */
var Translator = /** @class */ (function () {
    function Translator(_rootElement) {
        this._rootElement = _rootElement;
    }
    /**
     * Given `document` client coordinates, computes the position relative to the
     * `Component`'s root element, taking into account the cumulative CSS3
     * transforms of the root element ancestors up to `<body>`.
     *
     * This triggers a layout but doesn't further modify the DOM, so causes a
     * maximum of one layout per frame.
     *
     * Does not support `transform-origin` CSS property other than the default.
     */
    Translator.prototype.computePosition = function (clientX, clientY) {
        var clientPosition = {
            x: clientX,
            y: clientY,
        };
        var transform = Utils.Math.getCumulativeTransform(this._rootElement);
        if (transform == null) {
            return clientPosition;
        }
        var transformed = Utils.Math.applyTransform(transform, clientPosition);
        return transformed;
    };
    /**
     * Is the event's target part of the given component's DOM tree?
     */
    Translator.isEventInside = function (component, e) {
        return Utils.DOM.contains(component.root().rootElement().node(), e.target);
    };
    return Translator;
}());
exports.Translator = Translator;
